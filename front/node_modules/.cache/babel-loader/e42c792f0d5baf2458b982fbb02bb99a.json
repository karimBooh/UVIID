{"ast":null,"code":"import io from 'socket.io-client';\nimport store from \"./redux/store\";\n\nclass Socket {\n  constructor() {\n    this.socket = void 0;\n    this.pc = new Map();\n    this.socketId = '';\n    this.myStream = void 0;\n\n    this.init = (createOffer, partnerName) => {\n      this.pc.set(partnerName, new RTCPeerConnection({\n        iceServers: [{\n          urls: [\"stun:eu-turn4.xirsys.com\"]\n        }, {\n          username: \"ml0jh0qMKZKd9P_9C0UIBY2G0nSQMCFBUXGlk6IXDJf8G2uiCymg9WwbEJTMwVeiAAAAAF2__hNSaW5vbGVl\",\n          credential: \"4dd454a6-feee-11e9-b185-6adcafebbb45\",\n          urls: [\"turn:eu-turn4.xirsys.com:80?transport=udp\", \"turn:eu-turn4.xirsys.com:3478?transport=tcp\"]\n        }]\n      }));\n\n      if (this.myStream) {\n        this.myStream.getTracks().forEach(track => {\n          this.pc.get(partnerName).addTrack(track, this.myStream); //should trigger negotiationneeded event\n        });\n      }\n\n      if (createOffer) {\n        this.pc.get(partnerName).onnegotiationneeded = async () => {\n          let offer = await this.pc.get(partnerName).createOffer();\n          await this.pc.get(partnerName).setLocalDescription(offer);\n          let ordi = this.pc.get(partnerName);\n\n          if (ordi) {\n            this.socket.emit('sdp', {\n              description: ordi.localDescription,\n              to: partnerName,\n              sender: this.socket.io.engine.id\n            });\n          }\n        };\n      }\n\n      this.pc.get(partnerName).onicecandidate = ({\n        candidate\n      }) => {\n        this.socket.emit('ice candidates', {\n          candidate: candidate,\n          to: partnerName,\n          sender: this.socketId\n        });\n      };\n\n      this.pc.get(partnerName).ontrack = e => {\n        let str = e.streams[0];\n\n        if (document.getElementById(partnerName)) {\n          if (partnerName != this.socketId) // @ts-ignore\n            document.getElementById(partnerName).srcObject = str;\n        }\n      };\n\n      this.pc.get(partnerName).onconnectionstatechange = d => {\n        let elem = document.getElementById(partnerName);\n\n        switch (this.pc.get(partnerName).iceConnectionState) {\n          case 'disconnected':\n          case 'failed':\n            console.log(\"singale failed\"); // @ts-ignore\n\n            if (elem) elem.remove();\n            break;\n\n          case 'closed':\n            break;\n        }\n      };\n\n      this.pc.get(partnerName).onsignalingstatechange = d => {\n        switch (this.pc.get(partnerName).signalingState) {\n          case 'closed':\n            console.log(\"Signalling state is 'closed'\");\n            break;\n        }\n      };\n\n      store.dispatch({\n        type: \"ADD_PC\",\n        pc: this.pc\n      });\n    };\n  }\n\n  send() {\n    this.socket.emit('message', 'hi');\n  }\n\n  setStream(sream) {\n    this.myStream = sream;\n  }\n\n  getSocketId() {\n    return this.socketId;\n  }\n\n  connect(room) {\n    if (this.socket && this.socket.connected) {\n      return;\n    }\n\n    this.socket = io('http://localhost:8080');\n    return new Promise(resolve => {\n      this.socket.on('connect', () => {\n        this.socketId = this.socket.io.engine.id;\n        this.socket.emit('subscribe', {\n          room: room,\n          socketId: this.socketId\n        });\n        this.socket.on('to much in a room', data => {\n          // @ts-ignore\n          document.getElementById('local').remove(); // @ts-ignore\n\n          document.getElementById('room').hidden = false;\n        });\n        this.socket.on('new user', data => {\n          console.log(\"new user\");\n          this.socket.emit('newUserStart', {\n            to: data.socketId,\n            sender: this.socketId\n          });\n          this.init(true, data.socketId);\n        });\n        this.socket.on('newUserStart', data => {\n          console.log('newUserStart');\n          this.init(false, data.sender);\n        });\n        this.socket.on('ice candidates', async data => {\n          var _this$pc$get;\n\n          console.log('ice cantidate');\n          if (data.candidate) await ((_this$pc$get = this.pc.get(data.sender)) === null || _this$pc$get === void 0 ? void 0 : _this$pc$get.addIceCandidate(new RTCIceCandidate(data.candidate)));\n        });\n        this.socket.on('sdp', async data => {\n          console.log('sdp');\n\n          if (data.description && data.description.type === 'offer') {\n            var _this$pc$get2;\n\n            console.log(\"je suis dans offer\");\n            if (data.description) await ((_this$pc$get2 = this.pc.get(data.sender)) === null || _this$pc$get2 === void 0 ? void 0 : _this$pc$get2.setRemoteDescription(new RTCSessionDescription(data.description)));\n            navigator.mediaDevices.getUserMedia({\n              video: true,\n              audio: {\n                echoCancellation: true,\n                noiseSuppression: true\n              }\n            }).then(async stream => {\n              var _this$pc$get4, _this$pc$get5, _this$pc$get6;\n\n              this.myStream = stream;\n              stream.getTracks().forEach(track => {\n                var _this$pc$get3;\n\n                (_this$pc$get3 = this.pc.get(data.sender)) === null || _this$pc$get3 === void 0 ? void 0 : _this$pc$get3.addTrack(track, stream);\n              });\n              let answer = await ((_this$pc$get4 = this.pc.get(data.sender)) === null || _this$pc$get4 === void 0 ? void 0 : _this$pc$get4.createAnswer());\n              if (answer) await ((_this$pc$get5 = this.pc.get(data.sender)) === null || _this$pc$get5 === void 0 ? void 0 : _this$pc$get5.setLocalDescription(answer));\n              this.socket.emit('sdp', {\n                description: (_this$pc$get6 = this.pc.get(data.sender)) === null || _this$pc$get6 === void 0 ? void 0 : _this$pc$get6.localDescription,\n                to: data.sender,\n                sender: this.socket.io.engine.id\n              });\n            }).catch(e => {\n              console.error(e);\n            });\n          } else if (data.description && data.description.type === 'answer') {\n            var _this$pc$get7;\n\n            await ((_this$pc$get7 = this.pc.get(data.sender)) === null || _this$pc$get7 === void 0 ? void 0 : _this$pc$get7.setRemoteDescription(new RTCSessionDescription(data.description)));\n          }\n        });\n        resolve(this.socket);\n      });\n    });\n  }\n\n  disconnect() {\n    this.socket.emit('disconnect');\n    this.socket.close();\n  }\n\n}\n\nconst instance = new Socket();\nexport default instance;","map":{"version":3,"sources":["/home/rimkus/WebstormProjects/UVIID/front/src/Socket.tsx"],"names":["io","store","Socket","socket","pc","Map","socketId","myStream","init","createOffer","partnerName","set","RTCPeerConnection","iceServers","urls","username","credential","getTracks","forEach","track","get","addTrack","onnegotiationneeded","offer","setLocalDescription","ordi","emit","description","localDescription","to","sender","engine","id","onicecandidate","candidate","ontrack","e","str","streams","document","getElementById","srcObject","onconnectionstatechange","d","elem","iceConnectionState","console","log","remove","onsignalingstatechange","signalingState","dispatch","type","send","setStream","sream","getSocketId","connect","room","connected","Promise","resolve","on","data","hidden","addIceCandidate","RTCIceCandidate","setRemoteDescription","RTCSessionDescription","navigator","mediaDevices","getUserMedia","video","audio","echoCancellation","noiseSuppression","then","stream","answer","createAnswer","catch","error","disconnect","close","instance"],"mappings":"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","sourcesContent":["import io from 'socket.io-client'\nimport store from \"./redux/store\";\n\nclass  Socket {\n    private socket : any;\n    private pc =  new Map<string, RTCPeerConnection>();\n    private socketId = '';\n    // @ts-ignore\n    private myStream : MediaStream;\n\n    send() {\n        this.socket.emit('message', 'hi');\n    }\n\n    setStream(sream : MediaStream) {\n        this.myStream = sream;\n    }\n\n    getSocketId() : string {\n        return this.socketId;\n    }\n\n    connect(room : string) {\n        if (this.socket && this.socket.connected) {\n            return ;\n        }\n        this.socket = io('http://localhost:8080');\n        return new Promise(resolve => {\n            this.socket.on('connect', () => {\n                this.socketId = this.socket.io.engine.id;\n\n                this.socket.emit('subscribe', {\n                    room: room,\n                    socketId: this.socketId\n                });\n\n                this.socket.on('to much in a room', (data: any)=>{\n                    // @ts-ignore\n                    document.getElementById('local').remove();\n                    // @ts-ignore\n                    document.getElementById('room').hidden = false;\n                });\n\n                this.socket.on('new user', (data: any)=>{\n                    console.log(\"new user\");\n                    this.socket.emit('newUserStart', {to:data.socketId, sender:this.socketId});\n                    this.init(true, data.socketId);\n                });\n\n                this.socket.on('newUserStart', (data : any)=>{\n                    console.log('newUserStart');\n                    this.init(false, data.sender);\n                });\n\n                this.socket.on('ice candidates', async (data: any)=>{\n                    console.log('ice cantidate');\n                    if(data.candidate)\n                        await this.pc.get(data.sender)?.addIceCandidate(new RTCIceCandidate(data.candidate));\n                });\n\n                this.socket.on('sdp', async (data : any)=>{\n                    console.log('sdp');\n                    if(data.description && data.description.type === 'offer'){\n                        console.log(\"je suis dans offer\");\n                        if (data.description)\n                            await this.pc.get(data.sender)?.setRemoteDescription(new RTCSessionDescription(data.description));\n\n                        navigator.mediaDevices.getUserMedia({\n                            video: true,\n                            audio: {\n                                echoCancellation: true,\n                                noiseSuppression: true\n                            }\n                        }).then(async (stream)=>{\n                            this.myStream = stream;\n\n                            stream.getTracks().forEach((track:  MediaStreamTrack)=>{\n                                this.pc.get(data.sender)?.addTrack(track, stream);\n                            });\n\n                            let answer = await this.pc.get(data.sender)?.createAnswer();\n\n                            if (answer)\n                                await this.pc.get(data.sender)?.setLocalDescription(answer);\n\n                            this.socket.emit('sdp', {description:this.pc.get(data.sender)?.localDescription, to:data.sender, sender:this.socket.io.engine.id});\n                        }).catch((e : any)=>{\n                            console.error(e);\n                        });\n                    }\n\n                    else if(data.description && data.description.type === 'answer'){\n                        await this.pc.get(data.sender)?.setRemoteDescription(new RTCSessionDescription(data.description));\n                    }\n                });\n\n                resolve(this.socket);\n            });\n        });\n    }\n\n    init = (createOffer: boolean, partnerName: string) =>{\n        this.pc.set(partnerName, new RTCPeerConnection({iceServers: [\n                {\n                    urls: [\"stun:eu-turn4.xirsys.com\"]\n                },\n                {\n                    username: \"ml0jh0qMKZKd9P_9C0UIBY2G0nSQMCFBUXGlk6IXDJf8G2uiCymg9WwbEJTMwVeiAAAAAF2__hNSaW5vbGVl\",\n                    credential: \"4dd454a6-feee-11e9-b185-6adcafebbb45\",\n                    urls: [\n                        \"turn:eu-turn4.xirsys.com:80?transport=udp\",\n                        \"turn:eu-turn4.xirsys.com:3478?transport=tcp\"\n                    ]\n                }\n            ]\n        }));\n\n         if(this.myStream){\n            this.myStream.getTracks().forEach((track)=>{\n                this.pc.get(partnerName)!.addTrack(track, this.myStream);//should trigger negotiationneeded event\n            });\n        }\n\n        if(createOffer){\n            this.pc.get(partnerName)!.onnegotiationneeded = async ()=>{\n                let offer = await this.pc.get(partnerName)!.createOffer();\n                await this.pc.get(partnerName)!.setLocalDescription(offer);\n                let ordi = this.pc.get(partnerName)\n                if (ordi){\n                    this.socket.emit('sdp', {description:ordi.localDescription, to:partnerName, sender:this.socket.io.engine.id});\n                }\n            };\n        }\n\n        this.pc.get(partnerName)!.onicecandidate = ({candidate})=>{\n            this.socket.emit('ice candidates', {candidate: candidate, to:partnerName, sender:this.socketId});\n        };\n\n        this.pc.get(partnerName)!.ontrack = (e)=>{\n            let str = e.streams[0];\n            if(document.getElementById(partnerName)){\n                if (partnerName != this.socketId)\n                // @ts-ignore\n                    document.getElementById(partnerName).srcObject = str;\n            }\n        };\n\n        this.pc.get(partnerName)!.onconnectionstatechange = (d)=>{\n            let elem = document.getElementById(partnerName);\n            switch(this.pc.get(partnerName)!.iceConnectionState){\n                case 'disconnected':\n                case 'failed':\n                    console.log(\"singale failed\");\n                    // @ts-ignore\n                    if (elem)\n                        elem.remove()\n                    break;\n\n                case 'closed':\n                    break;\n            }\n        };\n\n        this.pc.get(partnerName)!.onsignalingstatechange = (d)=>{\n            switch(this.pc.get(partnerName)!.signalingState){\n                case 'closed':\n                    console.log(\"Signalling state is 'closed'\");\n                    break;\n            }\n        };\n        store.dispatch({type : \"ADD_PC\", pc : this.pc});\n\n    }\n\n    disconnect() {\n        this.socket.emit('disconnect');\n        this.socket.close();\n    }\n}\n\nconst instance = new Socket();\nexport default instance\n"]},"metadata":{},"sourceType":"module"}