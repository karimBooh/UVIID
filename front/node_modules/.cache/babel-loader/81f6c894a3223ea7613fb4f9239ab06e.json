{"ast":null,"code":"import io from 'socket.io-client';\n\nclass Socket {\n  constructor() {\n    this.socket = void 0;\n    this.pc = void 0;\n\n    this.init = (createOffer, partnerName) => {\n      this.pc[partnerName] = new RTCPeerConnection(h.getIceServer());\n\n      if (screen && screen.getTracks().length) {\n        screen.getTracks().forEach(track => {\n          this.pc[partnerName].addTrack(track, screen); //should trigger negotiationneeded event\n        });\n      } else if (myStream) {\n        myStream.getTracks().forEach(track => {\n          this.pc[partnerName].addTrack(track, myStream); //should trigger negotiationneeded event\n        });\n      } else {\n        h.getUserFullMedia().then(stream => {\n          //save my stream\n          myStream = stream;\n          stream.getTracks().forEach(track => {\n            this.pc[partnerName].addTrack(track, stream); //should trigger negotiationneeded event\n          });\n          h.setLocalStream(stream);\n        }).catch(e => {\n          console.error(`stream error: ${e}`);\n        });\n      } //create offer\n\n\n      if (createOffer) {\n        this.pc[partnerName].onnegotiationneeded = async () => {\n          let offer = await this.pc[partnerName].createOffer();\n          await this.pc[partnerName].setLocalDescription(offer);\n          this.socket.emit('sdp', {\n            description: this.pc[partnerName].localDescription,\n            to: partnerName,\n            sender: this.socket.io.engine.id\n          });\n        };\n      } //send ice candidate to partnerNames\n\n\n      pc[partnerName].onicecandidate = ({\n        candidate\n      }) => {\n        socket.emit('ice candidates', {\n          candidate: candidate,\n          to: partnerName,\n          sender: socketId\n        });\n      }; //add\n\n\n      pc[partnerName].ontrack = e => {\n        let str = e.streams[0];\n\n        if (document.getElementById(`${partnerName}-video`)) {\n          document.getElementById(`${partnerName}-video`).srcObject = str;\n        } else {\n          //video elem\n          let newVid = document.createElement('video');\n          newVid.id = `${partnerName}-video`;\n          newVid.srcObject = str;\n          newVid.autoplay = true;\n          newVid.className = 'remote-video'; //video controls elements\n\n          let controlDiv = document.createElement('div');\n          controlDiv.className = 'remote-video-controls';\n          controlDiv.innerHTML = `<i class=\"fa fa-microphone text-white pr-3 mute-remote-mic\" title=\"Mute\"></i>\n                        <i class=\"fa fa-expand text-white expand-remote-video\" title=\"Expand\"></i>`; //create a new div for card\n\n          let cardDiv = document.createElement('div');\n          cardDiv.className = 'card card-sm';\n          cardDiv.id = partnerName;\n          cardDiv.appendChild(newVid);\n          cardDiv.appendChild(controlDiv); //put div in main-section elem\n\n          document.getElementById('videos').appendChild(cardDiv);\n          h.adjustVideoElemSize();\n        }\n      };\n\n      pc[partnerName].onconnectionstatechange = d => {\n        switch (pc[partnerName].iceConnectionState) {\n          case 'disconnected':\n          case 'failed':\n            h.closeVideo(partnerName);\n            break;\n\n          case 'closed':\n            h.closeVideo(partnerName);\n            break;\n        }\n      };\n\n      pc[partnerName].onsignalingstatechange = d => {\n        switch (pc[partnerName].signalingState) {\n          case 'closed':\n            console.log(\"Signalling state is 'closed'\");\n            h.closeVideo(partnerName);\n            break;\n        }\n      };\n    };\n  }\n\n  send() {\n    this.socket.emit('message', 'hi');\n  }\n\n  connect(room) {\n    if (this.socket && this.socket.connected) {\n      return;\n    }\n\n    this.socket = io('http://localhost:8080');\n    return new Promise(resolve => {\n      this.socket.on('connect', () => {\n        let socketId = this.socket.io.engine.id;\n        this.socket.emit('subscribe', {\n          room: room,\n          socketId: socketId\n        });\n        this.socket.on('new user', data => {\n          this.socket.emit('newUserStart', {\n            to: data.socketId,\n            sender: socketId\n          });\n          this.pc.push(data.socketId);\n          init(true, data.socketId);\n        });\n        this.socket.on('newUserStart', data => {\n          this.pc.push(data.sender);\n          init(false, data.sender);\n        });\n        this.socket.on('ice candidates', async data => {\n          data.candidate ? await this.pc[data.sender].addIceCandidate(new RTCIceCandidate(data.candidate)) : '';\n        });\n        resolve(this.socket);\n      });\n    });\n  }\n\n  disconnect() {\n    this.socket.emit('disconnect');\n    this.socket.close();\n  }\n\n}\n\nconst instance = new Socket();\nexport default instance;","map":{"version":3,"sources":["/home/rimkus/WebstormProjects/UVIID/front/src/Socket.tsx"],"names":["io","Socket","socket","pc","init","createOffer","partnerName","RTCPeerConnection","h","getIceServer","screen","getTracks","length","forEach","track","addTrack","myStream","getUserFullMedia","then","stream","setLocalStream","catch","e","console","error","onnegotiationneeded","offer","setLocalDescription","emit","description","localDescription","to","sender","engine","id","onicecandidate","candidate","socketId","ontrack","str","streams","document","getElementById","srcObject","newVid","createElement","autoplay","className","controlDiv","innerHTML","cardDiv","appendChild","adjustVideoElemSize","onconnectionstatechange","d","iceConnectionState","closeVideo","onsignalingstatechange","signalingState","log","send","connect","room","connected","Promise","resolve","on","data","push","addIceCandidate","RTCIceCandidate","disconnect","close","instance"],"mappings":"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","sourcesContent":["import io from 'socket.io-client'\n\n\nclass  Socket {\n    private socket : any;\n    private pc : RTCPeerConnection[];\n\n    send() {\n        this.socket.emit('message', 'hi');\n    }\n\n    connect(room : string) {\n        if (this.socket && this.socket.connected) {\n            return ;\n        }\n        this.socket = io('http://localhost:8080');\n        return new Promise(resolve => {\n            this.socket.on('connect', () => {\n                let socketId = this.socket.io.engine.id;\n\n                this.socket.emit('subscribe', {\n                    room: room,\n                    socketId: socketId\n                });\n\n                this.socket.on('new user', (data: any)=>{\n                    this.socket.emit('newUserStart', {to:data.socketId, sender:socketId});\n                    this.pc.push(data.socketId);\n                    init(true, data.socketId);\n                });\n\n\n                this.socket.on('newUserStart', (data : any)=>{\n                    this.pc.push(data.sender);\n                    init(false, data.sender);\n                });\n\n                this.socket.on('ice candidates', async (data:any)=>{\n                    data.candidate ? await this.pc[data.sender].addIceCandidate(new RTCIceCandidate(data.candidate)) : '';\n                });\n                resolve(this.socket);\n            });\n        });\n    }\n\n    init = (createOffer: boolean, partnerName: string) =>{\n        this.pc[partnerName] = new RTCPeerConnection(h.getIceServer());\n\n        if(screen && screen.getTracks().length){\n            screen.getTracks().forEach((track)=>{\n                this.pc[partnerName].addTrack(track, screen);//should trigger negotiationneeded event\n            });\n        }\n\n        else if(myStream){\n            myStream.getTracks().forEach((track)=>{\n                this.pc[partnerName].addTrack(track, myStream);//should trigger negotiationneeded event\n            });\n        }\n\n        else{\n            h.getUserFullMedia().then((stream)=>{\n                //save my stream\n                myStream = stream;\n\n                stream.getTracks().forEach((track)=>{\n                    this.pc[partnerName].addTrack(track, stream);//should trigger negotiationneeded event\n                });\n\n                h.setLocalStream(stream);\n            }).catch((e)=>{\n                console.error(`stream error: ${e}`);\n            });\n        }\n\n\n\n        //create offer\n        if(createOffer){\n            this.pc[partnerName].onnegotiationneeded = async ()=>{\n                let offer = await this.pc[partnerName].createOffer();\n\n                await this.pc[partnerName].setLocalDescription(offer);\n\n                this.socket.emit('sdp', {description:this.pc[partnerName].localDescription, to:partnerName, sender:this.socket.io.engine.id});\n            };\n        }\n\n\n\n        //send ice candidate to partnerNames\n        pc[partnerName].onicecandidate = ({candidate})=>{\n            socket.emit('ice candidates', {candidate: candidate, to:partnerName, sender:socketId});\n        };\n\n\n\n        //add\n        pc[partnerName].ontrack = (e)=>{\n            let str = e.streams[0];\n            if(document.getElementById(`${partnerName}-video`)){\n                document.getElementById(`${partnerName}-video`).srcObject = str;\n            }\n\n            else{\n                //video elem\n                let newVid = document.createElement('video');\n                newVid.id = `${partnerName}-video`;\n                newVid.srcObject = str;\n                newVid.autoplay = true;\n                newVid.className = 'remote-video';\n\n                //video controls elements\n                let controlDiv = document.createElement('div');\n                controlDiv.className = 'remote-video-controls';\n                controlDiv.innerHTML = `<i class=\"fa fa-microphone text-white pr-3 mute-remote-mic\" title=\"Mute\"></i>\n                        <i class=\"fa fa-expand text-white expand-remote-video\" title=\"Expand\"></i>`;\n\n                //create a new div for card\n                let cardDiv = document.createElement('div');\n                cardDiv.className = 'card card-sm';\n                cardDiv.id = partnerName;\n                cardDiv.appendChild(newVid);\n                cardDiv.appendChild(controlDiv);\n\n                //put div in main-section elem\n                document.getElementById('videos').appendChild(cardDiv);\n\n                h.adjustVideoElemSize();\n            }\n        };\n\n\n\n        pc[partnerName].onconnectionstatechange = (d)=>{\n            switch(pc[partnerName].iceConnectionState){\n                case 'disconnected':\n                case 'failed':\n                    h.closeVideo(partnerName);\n                    break;\n\n                case 'closed':\n                    h.closeVideo(partnerName);\n                    break;\n            }\n        };\n\n\n\n        pc[partnerName].onsignalingstatechange = (d)=>{\n            switch(pc[partnerName].signalingState){\n                case 'closed':\n                    console.log(\"Signalling state is 'closed'\");\n                    h.closeVideo(partnerName);\n                    break;\n            }\n        };\n    }\n\n    disconnect() {\n        this.socket.emit('disconnect');\n        this.socket.close();\n    }\n}\n\nconst instance = new Socket();\nexport default instance\n"]},"metadata":{},"sourceType":"module"}