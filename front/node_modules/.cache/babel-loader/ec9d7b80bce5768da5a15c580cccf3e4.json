{"ast":null,"code":"import io from 'socket.io-client';\n\nclass Socket {\n  constructor() {\n    this.socket = void 0;\n    this.pc = {};\n    this.socketId = '';\n    this.myStream = void 0;\n\n    this.init = (createOffer, partnerName) => {\n      this.pc[partnerName] = new RTCPeerConnection({\n        iceServers: [{\n          urls: [\"stun:eu-turn4.xirsys.com\"]\n        }, {\n          username: \"ml0jh0qMKZKd9P_9C0UIBY2G0nSQMCFBUXGlk6IXDJf8G2uiCymg9WwbEJTMwVeiAAAAAF2__hNSaW5vbGVl\",\n          credential: \"4dd454a6-feee-11e9-b185-6adcafebbb45\",\n          urls: [\"turn:eu-turn4.xirsys.com:80?transport=udp\", \"turn:eu-turn4.xirsys.com:3478?transport=tcp\"]\n        }]\n      });\n\n      if (this.myStream) {\n        this.myStream.getTracks().forEach(track => {\n          this.pc[partnerName].addTrack(track, this.myStream); //should trigger negotiationneeded event\n        });\n      } else {\n        navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: {\n            echoCancellation: true,\n            noiseSuppression: true\n          }\n        }).then(stream => {\n          //save my stream\n          this.myStream = stream;\n          stream.getTracks().forEach(track => {\n            this.pc[partnerName].addTrack(track, stream); //should trigger negotiationneeded event\n          }); //h.setLocalStream(stream);\n        }).catch(e => {\n          console.error(`stream error: ${e}`);\n        });\n      }\n\n      console.log(\"salut !!!!\"); //create offer\n\n      if (createOffer) {\n        console.log(\"toi1 !!!!\");\n\n        this.pc[partnerName].onnegotiationneeded = async () => {\n          console.log(\"toi2 !!!!\");\n          let offer = await this.pc[partnerName].createOffer();\n          console.log(\"toi3 !!!!\");\n          await this.pc[partnerName].setLocalDescription(offer);\n          this.socket.emit('sdp', {\n            description: this.pc[partnerName].localDescription,\n            to: partnerName,\n            sender: this.socket.io.engine.id\n          });\n        };\n      } //send ice candidate to partnerNames\n\n\n      this.pc[partnerName].onicecandidate = ({\n        candidate\n      }) => {\n        this.socket.emit('ice candidates', {\n          candidate: candidate,\n          to: partnerName,\n          sender: this.socketId\n        });\n      }; //add\n\n      /*pc[partnerName].ontrack = (e)=>{\n          let str = e.streams[0];\n          if(document.getElementById(`${partnerName}-video`)){\n              document.getElementById(`${partnerName}-video`).srcObject = str;\n          }\n           else{\n              //video elem\n              let newVid = document.createElement('video');\n              newVid.id = `${partnerName}-video`;\n              newVid.srcObject = str;\n              newVid.autoplay = true;\n              newVid.className = 'remote-video';\n               //video controls elements\n              let controlDiv = document.createElement('div');\n              controlDiv.className = 'remote-video-controls';\n              controlDiv.innerHTML = `<i class=\"fa fa-microphone text-white pr-3 mute-remote-mic\" title=\"Mute\"></i>\n                      <i class=\"fa fa-expand text-white expand-remote-video\" title=\"Expand\"></i>`;\n               //create a new div for card\n              let cardDiv = document.createElement('div');\n              cardDiv.className = 'card card-sm';\n              cardDiv.id = partnerName;\n              cardDiv.appendChild(newVid);\n              cardDiv.appendChild(controlDiv);\n               //put div in main-section elem\n              document.getElementById('videos').appendChild(cardDiv);\n               h.adjustVideoElemSize();\n          }\n      };*/\n\n\n      this.pc[partnerName].onconnectionstatechange = d => {\n        switch (this.pc[partnerName].iceConnectionState) {\n          case 'disconnected':\n          case 'failed':\n            console.log(\"singale failde\"); //  h.closeVideo(partnerName);\n\n            break;\n\n          case 'closed':\n            console.log(\"signam closed\"); // h.closeVideo(partnerName);\n\n            break;\n        }\n      };\n\n      this.pc[partnerName].onsignalingstatechange = d => {\n        switch (this.pc[partnerName].signalingState) {\n          case 'closed':\n            console.log(\"Signalling state is 'closed'\"); //     h.closeVideo(partnerName);\n\n            break;\n        }\n      };\n    };\n  }\n\n  send() {\n    this.socket.emit('message', 'hi');\n  }\n\n  connect(room) {\n    if (this.socket && this.socket.connected) {\n      return;\n    }\n\n    this.socket = io('http://localhost:8080');\n    return new Promise(resolve => {\n      this.socket.on('connect', () => {\n        this.socketId = this.socket.io.engine.id;\n        this.socket.emit('subscribe', {\n          room: room,\n          socketId: this.socketId\n        });\n        this.socket.on('new user', data => {\n          console.log(\"je suis la true\");\n          this.socket.emit('newUserStart', {\n            to: data.socketId,\n            sender: this.socketId\n          });\n          this.init(true, data.socketId);\n        });\n        this.socket.on('newUserStart', data => {\n          console.log('jes suis la false');\n          this.init(false, data.sender);\n        });\n        this.socket.on('ice candidates', async data => {\n          if (data.candidate) await this.pc[data.sender].addIceCandidate(new RTCIceCandidate(data.candidate));\n        });\n        this.socket.on('sdp', async data => {\n          if (data.description.type === 'offer') {\n            if (data.desciption) await this.pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description));\n            h.getUserFullMedia().then(async stream => {\n              if (!document.getElementById('local').srcObject) {\n                h.setLocalStream(stream);\n              } //save my stream\n\n\n              this.myStream = stream;\n              stream.getTracks().forEach(track => {\n                this.pc[data.sender].addTrack(track, stream);\n              });\n              let answer = await this.pc[data.sender].createAnswer();\n              await this.pc[data.sender].setLocalDescription(answer);\n              this.socket.emit('sdp', {\n                description: this.pc[data.sender].localDescription,\n                to: data.sender,\n                sender: this.socket.io.engine.id\n              });\n            }).catch(e => {\n              console.error(e);\n            });\n          } else if (data.description.type === 'answer') {\n            await this.pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description));\n          }\n        });\n        resolve(this.socket);\n      });\n    });\n  }\n\n  disconnect() {\n    this.socket.emit('disconnect');\n    this.socket.close();\n  }\n\n}\n\nconst instance = new Socket();\nexport default instance;","map":{"version":3,"sources":["/home/rimkus/WebstormProjects/UVIID/front/src/Socket.tsx"],"names":["io","Socket","socket","pc","socketId","myStream","init","createOffer","partnerName","RTCPeerConnection","iceServers","urls","username","credential","getTracks","forEach","track","addTrack","navigator","mediaDevices","getUserMedia","video","audio","echoCancellation","noiseSuppression","then","stream","catch","e","console","error","log","onnegotiationneeded","offer","setLocalDescription","emit","description","localDescription","to","sender","engine","id","onicecandidate","candidate","onconnectionstatechange","d","iceConnectionState","onsignalingstatechange","signalingState","send","connect","room","connected","Promise","resolve","on","data","addIceCandidate","RTCIceCandidate","type","desciption","setRemoteDescription","RTCSessionDescription","h","getUserFullMedia","document","getElementById","srcObject","setLocalStream","answer","createAnswer","disconnect","close","instance"],"mappings":"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","sourcesContent":["import io from 'socket.io-client'\n\ninterface IHash {\n    [socketid : string] : RTCPeerConnection\n}\n\nclass  Socket {\n    private socket : any;\n    private pc : IHash = {};\n    private socketId = '';\n    // @ts-ignore\n    private myStream : MediaStream;\n\n    send() {\n        this.socket.emit('message', 'hi');\n    }\n\n    connect(room : string) {\n        if (this.socket && this.socket.connected) {\n            return ;\n        }\n        this.socket = io('http://localhost:8080');\n        return new Promise(resolve => {\n            this.socket.on('connect', () => {\n                this.socketId = this.socket.io.engine.id;\n\n                this.socket.emit('subscribe', {\n                    room: room,\n                    socketId: this.socketId\n                });\n\n                this.socket.on('new user', (data: any)=>{\n                    console.log(\"je suis la true\");\n                    this.socket.emit('newUserStart', {to:data.socketId, sender:this.socketId});\n                    this.init(true, data.socketId);\n                });\n\n\n                this.socket.on('newUserStart', (data : any)=>{\n                    console.log('jes suis la false');\n                    this.init(false, data.sender);\n                });\n\n                this.socket.on('ice candidates', async (data: any)=>{\n                    if(data.candidate)\n                        await this.pc[data.sender].addIceCandidate(new RTCIceCandidate(data.candidate));\n                });\n\n\n                this.socket.on('sdp', async (data : any)=>{\n                    if(data.description.type === 'offer'){\n                        if (data.desciption)\n                            await this.pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description));\n\n                        h.getUserFullMedia().then(async (stream)=>{\n                            if(!document.getElementById('local').srcObject){\n                                h.setLocalStream(stream);\n                            }\n\n                            //save my stream\n                            this.myStream = stream;\n\n                            stream.getTracks().forEach((track:  MediaStreamTrack)=>{\n                                this.pc[data.sender].addTrack(track, stream);\n                            });\n\n                            let answer = await this.pc[data.sender].createAnswer();\n\n                            await this.pc[data.sender].setLocalDescription(answer);\n\n                            this.socket.emit('sdp', {description:this.pc[data.sender].localDescription, to:data.sender, sender:this.socket.io.engine.id});\n                        }).catch((e : any)=>{\n                            console.error(e);\n                        });\n                    }\n\n                    else if(data.description.type === 'answer'){\n                        await this.pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description));\n                    }\n                });\n\n                resolve(this.socket);\n            });\n        });\n    }\n\n    init = (createOffer: boolean, partnerName: string) =>{\n        this.pc[partnerName] = new RTCPeerConnection({iceServers: [\n            {\n                urls: [\"stun:eu-turn4.xirsys.com\"]\n            },\n            {\n                username: \"ml0jh0qMKZKd9P_9C0UIBY2G0nSQMCFBUXGlk6IXDJf8G2uiCymg9WwbEJTMwVeiAAAAAF2__hNSaW5vbGVl\",\n                credential: \"4dd454a6-feee-11e9-b185-6adcafebbb45\",\n                urls: [\n                    \"turn:eu-turn4.xirsys.com:80?transport=udp\",\n                    \"turn:eu-turn4.xirsys.com:3478?transport=tcp\"\n                ]\n            }\n        ]\n    });\n\n         if(this.myStream){\n            this.myStream.getTracks().forEach((track)=>{\n                this.pc[partnerName].addTrack(track, this.myStream);//should trigger negotiationneeded event\n            });\n        }\n\n        else{\n             navigator.mediaDevices.getUserMedia({\n                 video: true,\n                 audio: {\n                     echoCancellation: true,\n                     noiseSuppression: true\n                 }\n             }).then((stream)=>{\n                //save my stream\n                this.myStream = stream;\n\n                stream.getTracks().forEach((track : MediaStreamTrack)=>{\n                    this.pc[partnerName].addTrack(track, stream);//should trigger negotiationneeded event\n                });\n\n                //h.setLocalStream(stream);\n            }).catch((e)=>{\n                console.error(`stream error: ${e}`);\n            });\n        }\n\n\n        console.log(\"salut !!!!\")\n\n        //create offer\n        if(createOffer){\n            console.log(\"toi1 !!!!\")\n            this.pc[partnerName].onnegotiationneeded = async ()=>{\n                console.log(\"toi2 !!!!\")\n                let offer = await this.pc[partnerName].createOffer();\n\n                console.log(\"toi3 !!!!\")\n                await this.pc[partnerName].setLocalDescription(offer);\n                this.socket.emit('sdp', {description:this.pc[partnerName].localDescription, to:partnerName, sender:this.socket.io.engine.id});\n            };\n        }\n\n\n\n        //send ice candidate to partnerNames\n        this.pc[partnerName].onicecandidate = ({candidate})=>{\n            this.socket.emit('ice candidates', {candidate: candidate, to:partnerName, sender:this.socketId});\n        };\n\n\n\n        //add\n        /*pc[partnerName].ontrack = (e)=>{\n            let str = e.streams[0];\n            if(document.getElementById(`${partnerName}-video`)){\n                document.getElementById(`${partnerName}-video`).srcObject = str;\n            }\n\n            else{\n                //video elem\n                let newVid = document.createElement('video');\n                newVid.id = `${partnerName}-video`;\n                newVid.srcObject = str;\n                newVid.autoplay = true;\n                newVid.className = 'remote-video';\n\n                //video controls elements\n                let controlDiv = document.createElement('div');\n                controlDiv.className = 'remote-video-controls';\n                controlDiv.innerHTML = `<i class=\"fa fa-microphone text-white pr-3 mute-remote-mic\" title=\"Mute\"></i>\n                        <i class=\"fa fa-expand text-white expand-remote-video\" title=\"Expand\"></i>`;\n\n                //create a new div for card\n                let cardDiv = document.createElement('div');\n                cardDiv.className = 'card card-sm';\n                cardDiv.id = partnerName;\n                cardDiv.appendChild(newVid);\n                cardDiv.appendChild(controlDiv);\n\n                //put div in main-section elem\n                document.getElementById('videos').appendChild(cardDiv);\n\n                h.adjustVideoElemSize();\n            }\n        };*/\n\n\n\n        this.pc[partnerName].onconnectionstatechange = (d)=>{\n            switch(this.pc[partnerName].iceConnectionState){\n                case 'disconnected':\n                case 'failed':\n                    console.log(\"singale failde\");\n                  //  h.closeVideo(partnerName);\n                    break;\n\n                case 'closed':\n                    console.log(\"signam closed\");\n                   // h.closeVideo(partnerName);\n                    break;\n            }\n        };\n\n\n\n        this.pc[partnerName].onsignalingstatechange = (d)=>{\n            switch(this.pc[partnerName].signalingState){\n                case 'closed':\n                    console.log(\"Signalling state is 'closed'\");\n               //     h.closeVideo(partnerName);\n                    break;\n            }\n        };\n    }\n\n    disconnect() {\n        this.socket.emit('disconnect');\n        this.socket.close();\n    }\n}\n\nconst instance = new Socket();\nexport default instance\n"]},"metadata":{},"sourceType":"module"}