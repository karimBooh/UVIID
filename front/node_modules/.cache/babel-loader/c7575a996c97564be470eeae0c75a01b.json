{"ast":null,"code":"var _jsxFileName = \"/home/rimkus/WebstormProjects/UVIID/front/src/Component/Room.tsx\";\nimport * as React from \"react\";\nimport socket from './../Socket';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nclass Room extends React.Component {\n  componentDidMount() {\n    socket.connect(this.props.match.params.id);\n  }\n\n  componentWillUnmount() {\n    socket.disconnect();\n  }\n\n  render() {\n    console.log(this.props.pc);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, this.props.pc.forEach((value, key) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 32\n        }\n      }, /*#__PURE__*/React.createElement(\"video\", {\n        id: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 37\n        }\n      }));\n    }));\n  }\n\n} // @ts-ignore\n\n\nconst mapStateToProps = ({\n  pc\n}) => {\n  return {\n    pc\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(Room));\n/*\n\n\nstate = {\n        startDisabled: false,\n        callDisabled: true,\n        hangUpDisabled: true,\n        servers: null,\n        pc1: null,\n        pc2: null,\n        localStream: null\n    };\n\n    localVideoRef = React.createRef<HTMLVideoElement>();\n    remoteVideoRef = React.createRef<HTMLVideoElement>();\n\n    /*    componentDidMount() {\n\n            navigator.mediaDevices.getUserMedia({video: true, audio: true},).then((stream) => {\n                let video = document.querySelector(\"video\");\n                if (video) {\n                    video.srcObject = stream;\n                    video.onloadedmetadata = function (e) {\n                        if (video)\n                            video.play();\n                    };\n                }\n            }).catch((error) => {\n                console.log(error)\n            })\n        }\n\nstart = () => {\n    this.setState({\n        startDisabled: true\n    });\n    navigator.mediaDevices\n        .getUserMedia({\n            audio: true,\n            video: true\n        })\n        .then(this.gotStream)\n        .catch(e => alert(\"getUserMedia() error:\" + e.name));\n};\n\ngotStream = (stream: MediaStream) => {\n    if (this.localVideoRef.current)\n        this.localVideoRef.current.srcObject = stream;\n    this.setState({\n        callDisabled: false,\n        localStream: stream\n    });\n};\n\ncall = () => {\n    this.setState({\n        callDisabled: true,\n        hangUpDisabled: false\n    });\n    let {localStream} = this.state;\n\n    let servers = undefined,\n        pc1 = new RTCPeerConnection(servers),\n        pc2 = new RTCPeerConnection(servers);\n\n    pc1.onicecandidate = e => this.onIceCandidate(pc1, e);\n    pc1.oniceconnectionstatechange = e => console.log(pc1, e);\n\n    pc2.onicecandidate = e => this.onIceCandidate(pc2, e);\n    pc2.oniceconnectionstatechange = e => console.log(pc2, e);\n    pc2.ontrack = this.gotRemoteStream;\n\n    localStream\n        .getTracks()\n        .forEach(track => pc1.addTrack(track, localStream));\n\n\n    pc1\n        .createOffer({\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        })\n        .then(this.onCreateOfferSuccess, error =>\n            console.error(\n                \"Failed to create session description\",\n                error.toString()\n            )\n        );\n\n    this.setState({\n        servers,\n        pc1,state = {\n        startDisabled: false,\n        callDisabled: true,\n        hangUpDisabled: true,\n        servers: null,\n        pc1: null,\n        pc2: null,\n        localStream: null\n    };\n\n    localVideoRef = React.createRef<HTMLVideoElement>();\n    remoteVideoRef = React.createRef<HTMLVideoElement>();\n\n    /*    componentDidMount() {\n\n            navigator.mediaDevices.getUserMedia({video: true, audio: true},).then((stream) => {\n                let video = document.querySelector(\"video\");\n                if (video) {\n                    video.srcObject = stream;\n                    video.onloadedmetadata = function (e) {\n                        if (video)\n                            video.play();\n                    };\n                }\n            }).catch((error) => {\n                console.log(error)\n            })\n        }\n\n    start = () => {\n        this.setState({\n            startDisabled: true\n        });\n        navigator.mediaDevices\n            .getUserMedia({\n                audio: true,\n                video: true\n            })\n            .then(this.gotStream)\n            .catch(e => alert(\"getUserMedia() error:\" + e.name));\n    };\n\n    gotStream = (stream: MediaStream) => {\n        if (this.localVideoRef.current)\n            this.localVideoRef.current.srcObject = stream;\n        this.setState({\n            callDisabled: false,\n            localStream: stream\n        });\n    };\n\n    call = () => {\n        this.setState({\n            callDisabled: true,\n            hangUpDisabled: false\n        });\n        let {localStream} = this.state;\n\n        let servers = undefined,\n            pc1 = new RTCPeerConnection(servers),\n            pc2 = new RTCPeerConnection(servers);\n\n        pc1.onicecandidate = e => this.onIceCandidate(pc1, e);\n        pc1.oniceconnectionstatechange = e => console.log(pc1, e);\n\n        pc2.onicecandidate = e => this.onIceCandidate(pc2, e);\n        pc2.oniceconnectionstatechange = e => console.log(pc2, e);\n        pc2.ontrack = this.gotRemoteStream;\n\n        localStream\n            .getTracks()\n            .forEach(track => pc1.addTrack(track, localStream));\n\n\n        pc1\n            .createOffer({\n                offerToReceiveAudio: true,\n                offerToReceiveVideo: true\n            })\n            .then(this.onCreateOfferSuccess, error =>\n                console.error(\n                    \"Failed to create session description\",\n                    error.toString()\n                )\n            );\n\n        this.setState({\n            servers,\n            pc1,\n            pc2,\n            localStream\n        });\n    };\n\n    onCreateOfferSuccess = (desc: any) => {\n        let {pc1, pc2} = this.state;\n\n        pc1\n            .setLocalDescription(desc)\n            .then(\n                () =>\n                    console.log(\"pc1 setLocalDescription complete createOffer\"),\n                (error: any) =>\n                    console.error(\n                        \"pc1 Failed to set session description in createOffer\",\n                        error.toString()\n                    )\n            );\n\n        pc2.setRemoteDescription(desc).then(\n            () => {\n                console.log(\"pc2 setRemoteDescription complete createOffer\");\n                pc2\n                    .createAnswer()\n                    .then(this.onCreateAnswerSuccess, (error: any) =>\n                        console.error(\n                            \"pc2 Failed to set session description in createAnswer\",\n                            error.toString()\n                        )\n                    );\n            },\n            (error: any) =>\n                console.error(\n                    \"pc2 Failed to set session description in createOffer\",\n                    error.toString()\n                )\n        );\n    };\n\n    onCreateAnswerSuccess = (desc: RTCSessionDescriptionInit) => {\n        let {pc1, pc2} = this.state;\n\n        pc1\n            .setRemoteDescription(desc)\n            .then(\n                () =>\n                    console.log(\n                        \"pc1 setRemoteDescription complete createAnswer\"\n                    ),\n                (error: any) =>\n                    console.error(\n                        \"pc1 Failed to set session description in onCreateAnswer\",\n                        error.toString()\n                    )\n            );\n\n        pc2\n            .setLocalDescription(desc)\n            .then(\n                () =>\n                    console.log(\n                        \"pc2 setLocalDescription complete createAnswer\"\n                    ),\n                (error: any) =>\n                    console.error(\n                        \"pc2 Failed to set session description in onCreateAnswer\",\n                        error.toString()\n                    )\n            );\n    };\n\n    onIceCandidate = (pc: RTCPeerConnection, event: RTCPeerConnectionIceEvent) => {\n        let {pc1, pc2} = this.state;\n\n        let otherPc = pc === pc1 ? pc2 : pc1;\n\n        otherPc\n            .addIceCandidate(event.candidate)\n            .then(\n                () => console.log(\"addIceCandidate success\"),\n                (error: any) =>\n                    console.error(\n                        \"failed to add ICE Candidate\",\n                        error.toString()\n                    )\n            );\n    };\n\n    hangUp = () => {\n        let {pc1, pc2} = this.state;\n\n        pc1.close();\n        pc2.close();\n\n        this.setState({\n            pc1: null,\n            pc2: null,\n            hangUpDisabled: true,\n            callDisabled: false\n        });\n    };\n        pc2,\n        localStream\n    });\n};\n\nonCreateOfferSuccess = (desc: any) => {\n    let {pc1, pc2} = this.state;\n\n    pc1\n        .setLocalDescription(desc)\n        .then(\n            () =>\n                console.log(\"pc1 setLocalDescription complete createOffer\"),\n            (error: any) =>\n                console.error(\n                    \"pc1 Failed to set session description in createOffer\",\n                    error.toString()\n                )\n        );\n\n    pc2.setRemoteDescription(desc).then(\n        () => {\n            console.log(\"pc2 setRemoteDescription complete createOffer\");\n            pc2\n                .createAnswer()\n                .then(this.onCreateAnswerSuccess, (error: any) =>\n                    console.error(\n                        \"pc2 Failed to set session description in createAnswer\",\n                        error.toString()\n                    )\n                );\n        },\n        (error: any) =>\n            console.error(\n                \"pc2 Failed to set session description in createOffer\",\n                error.toString()\n            )\n    );\n};\n\nonCreateAnswerSuccess = (desc: RTCSessionDescriptionInit) => {\n    let {pc1, pc2} = this.state;\n\n    pc1\n        .setRemoteDescription(desc)\n        .then(\n            () =>\n                console.log(\n                    \"pc1 setRemoteDescription complete createAnswer\"\n                ),\n            (error: any) =>\n                console.error(\n                    \"pc1 Failed to set session description in onCreateAnswer\",\n                    error.toString()\n                )\n        );\n\n    pc2\n        .setLocalDescription(desc)\n        .then(\n            () =>\n                console.log(\n                    \"pc2 setLocalDescription complete createAnswer\"\n                ),\n            (error: any) =>\n                console.error(\n                    \"pc2 Failed to set session description in onCreateAnswer\",\n                    error.toString()\n                )\n        );\n};\n\nonIceCandidate = (pc: RTCPeerConnection, event: RTCPeerConnectionIceEvent) => {\n    let {pc1, pc2} = this.state;\n\n    let otherPc = pc === pc1 ? pc2 : pc1;\n\n    otherPc\n        .addIceCandidate(event.candidate)\n        .then(\n            () => console.log(\"addIceCandidate success\"),\n            (error: any) =>\n                console.error(\n                    \"failed to add ICE Candidate\",\n                    error.toString()\n                )\n        );\n};\n\nhangUp = () => {\n    let {pc1, pc2} = this.state;\n\n    pc1.close();\n    pc2.close();\n\n    this.setState({\n        pc1: null,\n        pc2: null,\n        hangUpDisabled: true,\n        callDisabled: false\n    });\n};\n\n\n    render() {\n        const {startDisabled, callDisabled, hangUpDisabled} = this.state;\n\n        return (\n            <div>\n                <video\n                    ref={this.localVideoRef}\n                    autoPlay\n                    muted\n                    style={{width: \"240px\", height: \"180px\"}}\n                />\n                <video\n                    ref={this.remoteVideoRef}\n                    autoPlay\n                    style={{width: \"240px\", height: \"180px\"}}\n                />\n\n                <div>\n                    <button onClick={this.start} disabled={startDisabled}>\n                        Start\n                    </button>\n                    <button onClick={this.call} disabled={callDisabled}>\n                        Call\n                    </button>\n                    <button onClick={this.hangUp} disabled={hangUpDisabled}>\n                        Hang Up\n                    </button>\n                </div>\n            </div>\n        )\n */","map":{"version":3,"sources":["/home/rimkus/WebstormProjects/UVIID/front/src/Component/Room.tsx"],"names":["React","socket","withRouter","connect","Room","Component","componentDidMount","props","match","params","id","componentWillUnmount","disconnect","render","console","log","pc","forEach","value","key","mapStateToProps"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAWA,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAA8C;AAE1CC,EAAAA,iBAAiB,GAAS;AACtBL,IAAAA,MAAM,CAACE,OAAP,CAAe,KAAKI,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAAvC;AACH;;AAEDC,EAAAA,oBAAoB,GAAS;AACzBV,IAAAA,MAAM,CAACW,UAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWS,EAAvB;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAKT,KAAL,CAAWS,EAAX,CAAcC,OAAd,CAAsB,CAACC,KAAD,EAAQC,GAAR,KAAiB;AACnC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAK;AAAO,QAAA,EAAE,EAAEA,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAL,CAAP;AACH,KAFD,CAFR,CADJ;AAUH;;AAtByC,C,CAyB9C;;;AACA,MAAMC,eAAe,GAAG,CAAC;AAACJ,EAAAA;AAAD,CAAD,KAAU;AAC9B,SAAO;AAACA,IAAAA;AAAD,GAAP;AACH,CAFD;;AAIA,eAAeb,OAAO,CAACiB,eAAD,CAAP,CAAyBlB,UAAU,CAACE,IAAD,CAAnC,CAAf;AAGA","sourcesContent":["import * as React from \"react\";\nimport {Button, Col, Row} from \"antd\";\nimport {CameraFilled, AudioFilled} from '@ant-design/icons';\nimport socket from './../Socket'\nimport {RouteComponentProps} from \"react-router\";\nimport {withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {IHash} from \"../IHash\";\n\ntype param = {\n    id: string\n}\n\ntype roomProps = RouteComponentProps<param> & {\n    pc: Map<string, RTCPeerConnection>;\n}\n\nclass Room extends React.Component<roomProps> {\n\n    componentDidMount(): void {\n        socket.connect(this.props.match.params.id)\n    }\n\n    componentWillUnmount(): void {\n        socket.disconnect()\n    }\n\n    render() {\n        console.log(this.props.pc);\n        return (\n            <div>\n                {\n                    this.props.pc.forEach((value, key,) => {\n                        return <div><video id={key}></video></div>\n                    })\n                }\n\n            </div>\n        )\n    }\n}\n\n// @ts-ignore\nconst mapStateToProps = ({pc}) => {\n    return {pc}\n}\n\nexport default connect(mapStateToProps)(withRouter(Room))\n\n\n/*\n\n\nstate = {\n        startDisabled: false,\n        callDisabled: true,\n        hangUpDisabled: true,\n        servers: null,\n        pc1: null,\n        pc2: null,\n        localStream: null\n    };\n\n    localVideoRef = React.createRef<HTMLVideoElement>();\n    remoteVideoRef = React.createRef<HTMLVideoElement>();\n\n    /*    componentDidMount() {\n\n            navigator.mediaDevices.getUserMedia({video: true, audio: true},).then((stream) => {\n                let video = document.querySelector(\"video\");\n                if (video) {\n                    video.srcObject = stream;\n                    video.onloadedmetadata = function (e) {\n                        if (video)\n                            video.play();\n                    };\n                }\n            }).catch((error) => {\n                console.log(error)\n            })\n        }\n\nstart = () => {\n    this.setState({\n        startDisabled: true\n    });\n    navigator.mediaDevices\n        .getUserMedia({\n            audio: true,\n            video: true\n        })\n        .then(this.gotStream)\n        .catch(e => alert(\"getUserMedia() error:\" + e.name));\n};\n\ngotStream = (stream: MediaStream) => {\n    if (this.localVideoRef.current)\n        this.localVideoRef.current.srcObject = stream;\n    this.setState({\n        callDisabled: false,\n        localStream: stream\n    });\n};\n\ncall = () => {\n    this.setState({\n        callDisabled: true,\n        hangUpDisabled: false\n    });\n    let {localStream} = this.state;\n\n    let servers = undefined,\n        pc1 = new RTCPeerConnection(servers),\n        pc2 = new RTCPeerConnection(servers);\n\n    pc1.onicecandidate = e => this.onIceCandidate(pc1, e);\n    pc1.oniceconnectionstatechange = e => console.log(pc1, e);\n\n    pc2.onicecandidate = e => this.onIceCandidate(pc2, e);\n    pc2.oniceconnectionstatechange = e => console.log(pc2, e);\n    pc2.ontrack = this.gotRemoteStream;\n\n    localStream\n        .getTracks()\n        .forEach(track => pc1.addTrack(track, localStream));\n\n\n    pc1\n        .createOffer({\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        })\n        .then(this.onCreateOfferSuccess, error =>\n            console.error(\n                \"Failed to create session description\",\n                error.toString()\n            )\n        );\n\n    this.setState({\n        servers,\n        pc1,state = {\n        startDisabled: false,\n        callDisabled: true,\n        hangUpDisabled: true,\n        servers: null,\n        pc1: null,\n        pc2: null,\n        localStream: null\n    };\n\n    localVideoRef = React.createRef<HTMLVideoElement>();\n    remoteVideoRef = React.createRef<HTMLVideoElement>();\n\n    /*    componentDidMount() {\n\n            navigator.mediaDevices.getUserMedia({video: true, audio: true},).then((stream) => {\n                let video = document.querySelector(\"video\");\n                if (video) {\n                    video.srcObject = stream;\n                    video.onloadedmetadata = function (e) {\n                        if (video)\n                            video.play();\n                    };\n                }\n            }).catch((error) => {\n                console.log(error)\n            })\n        }\n\n    start = () => {\n        this.setState({\n            startDisabled: true\n        });\n        navigator.mediaDevices\n            .getUserMedia({\n                audio: true,\n                video: true\n            })\n            .then(this.gotStream)\n            .catch(e => alert(\"getUserMedia() error:\" + e.name));\n    };\n\n    gotStream = (stream: MediaStream) => {\n        if (this.localVideoRef.current)\n            this.localVideoRef.current.srcObject = stream;\n        this.setState({\n            callDisabled: false,\n            localStream: stream\n        });\n    };\n\n    call = () => {\n        this.setState({\n            callDisabled: true,\n            hangUpDisabled: false\n        });\n        let {localStream} = this.state;\n\n        let servers = undefined,\n            pc1 = new RTCPeerConnection(servers),\n            pc2 = new RTCPeerConnection(servers);\n\n        pc1.onicecandidate = e => this.onIceCandidate(pc1, e);\n        pc1.oniceconnectionstatechange = e => console.log(pc1, e);\n\n        pc2.onicecandidate = e => this.onIceCandidate(pc2, e);\n        pc2.oniceconnectionstatechange = e => console.log(pc2, e);\n        pc2.ontrack = this.gotRemoteStream;\n\n        localStream\n            .getTracks()\n            .forEach(track => pc1.addTrack(track, localStream));\n\n\n        pc1\n            .createOffer({\n                offerToReceiveAudio: true,\n                offerToReceiveVideo: true\n            })\n            .then(this.onCreateOfferSuccess, error =>\n                console.error(\n                    \"Failed to create session description\",\n                    error.toString()\n                )\n            );\n\n        this.setState({\n            servers,\n            pc1,\n            pc2,\n            localStream\n        });\n    };\n\n    onCreateOfferSuccess = (desc: any) => {\n        let {pc1, pc2} = this.state;\n\n        pc1\n            .setLocalDescription(desc)\n            .then(\n                () =>\n                    console.log(\"pc1 setLocalDescription complete createOffer\"),\n                (error: any) =>\n                    console.error(\n                        \"pc1 Failed to set session description in createOffer\",\n                        error.toString()\n                    )\n            );\n\n        pc2.setRemoteDescription(desc).then(\n            () => {\n                console.log(\"pc2 setRemoteDescription complete createOffer\");\n                pc2\n                    .createAnswer()\n                    .then(this.onCreateAnswerSuccess, (error: any) =>\n                        console.error(\n                            \"pc2 Failed to set session description in createAnswer\",\n                            error.toString()\n                        )\n                    );\n            },\n            (error: any) =>\n                console.error(\n                    \"pc2 Failed to set session description in createOffer\",\n                    error.toString()\n                )\n        );\n    };\n\n    onCreateAnswerSuccess = (desc: RTCSessionDescriptionInit) => {\n        let {pc1, pc2} = this.state;\n\n        pc1\n            .setRemoteDescription(desc)\n            .then(\n                () =>\n                    console.log(\n                        \"pc1 setRemoteDescription complete createAnswer\"\n                    ),\n                (error: any) =>\n                    console.error(\n                        \"pc1 Failed to set session description in onCreateAnswer\",\n                        error.toString()\n                    )\n            );\n\n        pc2\n            .setLocalDescription(desc)\n            .then(\n                () =>\n                    console.log(\n                        \"pc2 setLocalDescription complete createAnswer\"\n                    ),\n                (error: any) =>\n                    console.error(\n                        \"pc2 Failed to set session description in onCreateAnswer\",\n                        error.toString()\n                    )\n            );\n    };\n\n    onIceCandidate = (pc: RTCPeerConnection, event: RTCPeerConnectionIceEvent) => {\n        let {pc1, pc2} = this.state;\n\n        let otherPc = pc === pc1 ? pc2 : pc1;\n\n        otherPc\n            .addIceCandidate(event.candidate)\n            .then(\n                () => console.log(\"addIceCandidate success\"),\n                (error: any) =>\n                    console.error(\n                        \"failed to add ICE Candidate\",\n                        error.toString()\n                    )\n            );\n    };\n\n    hangUp = () => {\n        let {pc1, pc2} = this.state;\n\n        pc1.close();\n        pc2.close();\n\n        this.setState({\n            pc1: null,\n            pc2: null,\n            hangUpDisabled: true,\n            callDisabled: false\n        });\n    };\n        pc2,\n        localStream\n    });\n};\n\nonCreateOfferSuccess = (desc: any) => {\n    let {pc1, pc2} = this.state;\n\n    pc1\n        .setLocalDescription(desc)\n        .then(\n            () =>\n                console.log(\"pc1 setLocalDescription complete createOffer\"),\n            (error: any) =>\n                console.error(\n                    \"pc1 Failed to set session description in createOffer\",\n                    error.toString()\n                )\n        );\n\n    pc2.setRemoteDescription(desc).then(\n        () => {\n            console.log(\"pc2 setRemoteDescription complete createOffer\");\n            pc2\n                .createAnswer()\n                .then(this.onCreateAnswerSuccess, (error: any) =>\n                    console.error(\n                        \"pc2 Failed to set session description in createAnswer\",\n                        error.toString()\n                    )\n                );\n        },\n        (error: any) =>\n            console.error(\n                \"pc2 Failed to set session description in createOffer\",\n                error.toString()\n            )\n    );\n};\n\nonCreateAnswerSuccess = (desc: RTCSessionDescriptionInit) => {\n    let {pc1, pc2} = this.state;\n\n    pc1\n        .setRemoteDescription(desc)\n        .then(\n            () =>\n                console.log(\n                    \"pc1 setRemoteDescription complete createAnswer\"\n                ),\n            (error: any) =>\n                console.error(\n                    \"pc1 Failed to set session description in onCreateAnswer\",\n                    error.toString()\n                )\n        );\n\n    pc2\n        .setLocalDescription(desc)\n        .then(\n            () =>\n                console.log(\n                    \"pc2 setLocalDescription complete createAnswer\"\n                ),\n            (error: any) =>\n                console.error(\n                    \"pc2 Failed to set session description in onCreateAnswer\",\n                    error.toString()\n                )\n        );\n};\n\nonIceCandidate = (pc: RTCPeerConnection, event: RTCPeerConnectionIceEvent) => {\n    let {pc1, pc2} = this.state;\n\n    let otherPc = pc === pc1 ? pc2 : pc1;\n\n    otherPc\n        .addIceCandidate(event.candidate)\n        .then(\n            () => console.log(\"addIceCandidate success\"),\n            (error: any) =>\n                console.error(\n                    \"failed to add ICE Candidate\",\n                    error.toString()\n                )\n        );\n};\n\nhangUp = () => {\n    let {pc1, pc2} = this.state;\n\n    pc1.close();\n    pc2.close();\n\n    this.setState({\n        pc1: null,\n        pc2: null,\n        hangUpDisabled: true,\n        callDisabled: false\n    });\n};\n\n\n    render() {\n        const {startDisabled, callDisabled, hangUpDisabled} = this.state;\n\n        return (\n            <div>\n                <video\n                    ref={this.localVideoRef}\n                    autoPlay\n                    muted\n                    style={{width: \"240px\", height: \"180px\"}}\n                />\n                <video\n                    ref={this.remoteVideoRef}\n                    autoPlay\n                    style={{width: \"240px\", height: \"180px\"}}\n                />\n\n                <div>\n                    <button onClick={this.start} disabled={startDisabled}>\n                        Start\n                    </button>\n                    <button onClick={this.call} disabled={callDisabled}>\n                        Call\n                    </button>\n                    <button onClick={this.hangUp} disabled={hangUpDisabled}>\n                        Hang Up\n                    </button>\n                </div>\n            </div>\n        )\n */\n"]},"metadata":{},"sourceType":"module"}