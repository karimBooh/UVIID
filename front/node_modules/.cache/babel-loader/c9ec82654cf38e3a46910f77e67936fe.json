{"ast":null,"code":"import io from 'socket.io-client';\nimport store from \"./redux/store\";\n\nclass Socket {\n  constructor() {\n    this.socket = void 0;\n    this.pc = new Map();\n    this.socketId = '';\n    this.myStream = void 0;\n\n    this.init = (createOffer, partnerName) => {\n      this.pc.set(partnerName, new RTCPeerConnection({\n        iceServers: [{\n          urls: [\"stun:eu-turn4.xirsys.com\"]\n        }, {\n          username: \"ml0jh0qMKZKd9P_9C0UIBY2G0nSQMCFBUXGlk6IXDJf8G2uiCymg9WwbEJTMwVeiAAAAAF2__hNSaW5vbGVl\",\n          credential: \"4dd454a6-feee-11e9-b185-6adcafebbb45\",\n          urls: [\"turn:eu-turn4.xirsys.com:80?transport=udp\", \"turn:eu-turn4.xirsys.com:3478?transport=tcp\"]\n        }]\n      }));\n      console.log(\"jai un stream ????\");\n\n      if (this.myStream) {\n        console.log(\"jai un stream\");\n        this.myStream.getTracks().forEach(track => {\n          this.pc.get(partnerName).addTrack(track, this.myStream); //should trigger negotiationneeded event\n        });\n      }\n      /*else{\n           navigator.mediaDevices.getUserMedia({\n               video: true,\n               audio: {\n                   echoCancellation: true,\n                   noiseSuppression: true\n               }\n           }).then((stream)=>{\n              //save my stream\n              this.myStream = stream;\n               stream.getTracks().forEach((track : MediaStreamTrack)=>{\n                  this.pc.get(partnerName)!.addTrack(track, stream);//should trigger negotiationneeded event\n              });\n               //h.setLocalStream(stream);\n          }).catch((e)=>{\n              console.error(`stream error: ${e}`);\n          });\n      }*/\n      //create offer\n\n\n      if (createOffer) {\n        this.pc.get(partnerName).onnegotiationneeded = async () => {\n          let offer = await this.pc.get(partnerName).createOffer();\n          await this.pc.get(partnerName).setLocalDescription(offer);\n          let ordi = this.pc.get(partnerName);\n\n          if (ordi) {\n            console.log(\"je vai envoyer sdp Ã  \" + partnerName);\n            this.socket.emit('sdp', {\n              description: ordi.localDescription,\n              to: partnerName,\n              sender: this.socket.io.engine.id\n            });\n          }\n        };\n      } //send ice candidate to partnerNames\n\n\n      this.pc.get(partnerName).onicecandidate = ({\n        candidate\n      }) => {\n        this.socket.emit('ice candidates', {\n          candidate: candidate,\n          to: partnerName,\n          sender: this.socketId\n        });\n      }; //add\n\n\n      this.pc.get(partnerName).ontrack = e => {\n        let str = e.streams[0];\n\n        if (document.getElementById(partnerName)) {\n          // @ts-ignore\n          document.getElementById(partnerName).srcObject = str;\n        }\n        /*else{\n            //video elem\n            let newVid = document.createElement('video');\n            newVid.id = `${partnerName}-video`;\n            newVid.srcObject = str;\n            newVid.autoplay = true;\n            newVid.className = 'remote-video';\n             //video controls elements\n            let controlDiv = document.createElement('div');\n            controlDiv.className = 'remote-video-controls';\n            controlDiv.innerHTML = `<i class=\"fa fa-microphone text-white pr-3 mute-remote-mic\" title=\"Mute\"></i>\n                    <i class=\"fa fa-expand text-white expand-remote-video\" title=\"Expand\"></i>`;\n             //create a new div for card\n            let cardDiv = document.createElement('div');\n            cardDiv.className = 'card card-sm';\n            cardDiv.id = partnerName;\n            cardDiv.appendChild(newVid);\n            cardDiv.appendChild(controlDiv);\n             //put div in main-section elem\n            document.getElementById('videos').appendChild(cardDiv);\n        //      h.adjustVideoElemSize();\n        }*/\n\n      };\n\n      this.pc.get(partnerName).onconnectionstatechange = d => {\n        switch (this.pc.get(partnerName).iceConnectionState) {\n          case 'disconnected':\n          case 'failed':\n            console.log(\"singale failed\"); //  h.closeVideo(partnerName);\n\n            break;\n\n          case 'closed':\n            console.log(\"signale closed\"); // h.closeVideo(partnerName);\n\n            break;\n        }\n      };\n\n      this.pc.get(partnerName).onsignalingstatechange = d => {\n        switch (this.pc.get(partnerName).signalingState) {\n          case 'closed':\n            console.log(\"Signalling state is 'closed'\"); //     h.closeVideo(partnerName);\n\n            break;\n        }\n      };\n\n      store.dispatch({\n        type: \"ADD_PC\",\n        pc: this.pc\n      });\n    };\n  }\n\n  send() {\n    this.socket.emit('message', 'hi');\n  }\n\n  setStream(sream) {\n    this.myStream = sream;\n  }\n\n  connect(room) {\n    if (this.socket && this.socket.connected) {\n      return;\n    }\n\n    this.socket = io('http://localhost:8080');\n    return new Promise(resolve => {\n      this.socket.on('connect', () => {\n        this.socketId = this.socket.io.engine.id;\n        console.log(this.socketId);\n        this.socket.emit('subscribe', {\n          room: room,\n          socketId: this.socketId\n        });\n        this.socket.on('new user', data => {\n          console.log(\"new user\");\n          this.socket.emit('newUserStart', {\n            to: data.socketId,\n            sender: this.socketId\n          });\n          this.init(true, data.socketId);\n        });\n        this.socket.on('newUserStart', data => {\n          console.log('newUserStart');\n          this.init(false, data.sender);\n        });\n        this.socket.on('ice candidates', async data => {\n          var _this$pc$get;\n\n          console.log('ice cantidate');\n          if (data.candidate) await ((_this$pc$get = this.pc.get(data.sender)) === null || _this$pc$get === void 0 ? void 0 : _this$pc$get.addIceCandidate(new RTCIceCandidate(data.candidate)));\n        });\n        this.socket.on('sdp', async data => {\n          console.log('sdp');\n\n          if (data.description.type === 'offer') {\n            var _this$pc$get2;\n\n            console.log(\"je suis dans offer\");\n            if (data.description) await ((_this$pc$get2 = this.pc.get(data.sender)) === null || _this$pc$get2 === void 0 ? void 0 : _this$pc$get2.setRemoteDescription(new RTCSessionDescription(data.description)));\n            navigator.mediaDevices.getUserMedia({\n              video: true,\n              audio: {\n                echoCancellation: true,\n                noiseSuppression: true\n              }\n            }).then(async stream => {\n              var _this$pc$get4, _this$pc$get5, _this$pc$get6;\n\n              /*    if(!document.getElementById('local').srcObject){\n                      h.setLocalStream(stream);\n                  }*/\n              //save my stream\n              this.myStream = stream;\n              stream.getTracks().forEach(track => {\n                var _this$pc$get3;\n\n                (_this$pc$get3 = this.pc.get(data.sender)) === null || _this$pc$get3 === void 0 ? void 0 : _this$pc$get3.addTrack(track, stream);\n              });\n              let answer = await ((_this$pc$get4 = this.pc.get(data.sender)) === null || _this$pc$get4 === void 0 ? void 0 : _this$pc$get4.createAnswer());\n              if (answer) await ((_this$pc$get5 = this.pc.get(data.sender)) === null || _this$pc$get5 === void 0 ? void 0 : _this$pc$get5.setLocalDescription(answer));\n              this.socket.emit('sdp', {\n                description: (_this$pc$get6 = this.pc.get(data.sender)) === null || _this$pc$get6 === void 0 ? void 0 : _this$pc$get6.localDescription,\n                to: data.sender,\n                sender: this.socket.io.engine.id\n              });\n            }).catch(e => {\n              console.error(e);\n            });\n          } else if (data.description.type === 'answer') {\n            var _this$pc$get7;\n\n            await ((_this$pc$get7 = this.pc.get(data.sender)) === null || _this$pc$get7 === void 0 ? void 0 : _this$pc$get7.setRemoteDescription(new RTCSessionDescription(data.description)));\n          }\n        });\n        resolve(this.socket);\n      });\n    });\n  }\n\n  disconnect() {\n    this.socket.emit('disconnect');\n    this.socket.close();\n  }\n\n}\n\nconst instance = new Socket();\nexport default instance;","map":{"version":3,"sources":["/home/rimkus/WebstormProjects/UVIID/front/src/Socket.tsx"],"names":["io","store","Socket","socket","pc","Map","socketId","myStream","init","createOffer","partnerName","set","RTCPeerConnection","iceServers","urls","username","credential","console","log","getTracks","forEach","track","get","addTrack","onnegotiationneeded","offer","setLocalDescription","ordi","emit","description","localDescription","to","sender","engine","id","onicecandidate","candidate","ontrack","e","str","streams","document","getElementById","srcObject","onconnectionstatechange","d","iceConnectionState","onsignalingstatechange","signalingState","dispatch","type","send","setStream","sream","connect","room","connected","Promise","resolve","on","data","addIceCandidate","RTCIceCandidate","setRemoteDescription","RTCSessionDescription","navigator","mediaDevices","getUserMedia","video","audio","echoCancellation","noiseSuppression","then","stream","answer","createAnswer","catch","error","disconnect","close","instance"],"mappings":"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","sourcesContent":["import io from 'socket.io-client'\nimport store from \"./redux/store\";\n\nclass  Socket {\n    private socket : any;\n    private pc =  new Map<string, RTCPeerConnection>();\n    private socketId = '';\n    // @ts-ignore\n    private myStream : MediaStream;\n\n    send() {\n        this.socket.emit('message', 'hi');\n    }\n\n    setStream(sream : MediaStream) {\n        this.myStream = sream;\n    }\n\n    connect(room : string) {\n        if (this.socket && this.socket.connected) {\n            return ;\n        }\n        this.socket = io('http://localhost:8080');\n        return new Promise(resolve => {\n            this.socket.on('connect', () => {\n                this.socketId = this.socket.io.engine.id;\n\n                console.log(this.socketId);\n\n                this.socket.emit('subscribe', {\n                    room: room,\n                    socketId: this.socketId\n                });\n\n                this.socket.on('new user', (data: any)=>{\n                    console.log(\"new user\");\n                    this.socket.emit('newUserStart', {to:data.socketId, sender:this.socketId});\n                    this.init(true, data.socketId);\n                });\n\n\n                this.socket.on('newUserStart', (data : any)=>{\n                    console.log('newUserStart');\n                    this.init(false, data.sender);\n                });\n\n                this.socket.on('ice candidates', async (data: any)=>{\n                    console.log('ice cantidate');\n                    if(data.candidate)\n                        await this.pc.get(data.sender)?.addIceCandidate(new RTCIceCandidate(data.candidate));\n                });\n\n\n                this.socket.on('sdp', async (data : any)=>{\n                    console.log('sdp');\n                    if(data.description.type === 'offer'){\n                        console.log(\"je suis dans offer\");\n                        if (data.description)\n                            await this.pc.get(data.sender)?.setRemoteDescription(new RTCSessionDescription(data.description));\n\n                        navigator.mediaDevices.getUserMedia({\n                            video: true,\n                            audio: {\n                                echoCancellation: true,\n                                noiseSuppression: true\n                            }\n                        }).then(async (stream)=>{\n                        /*    if(!document.getElementById('local').srcObject){\n                                h.setLocalStream(stream);\n                            }*/\n\n                            //save my stream\n                            this.myStream = stream;\n\n                            stream.getTracks().forEach((track:  MediaStreamTrack)=>{\n                                this.pc.get(data.sender)?.addTrack(track, stream);\n                            });\n\n                            let answer = await this.pc.get(data.sender)?.createAnswer();\n\n                            if (answer)\n                                await this.pc.get(data.sender)?.setLocalDescription(answer);\n\n                            this.socket.emit('sdp', {description:this.pc.get(data.sender)?.localDescription, to:data.sender, sender:this.socket.io.engine.id});\n                        }).catch((e : any)=>{\n                            console.error(e);\n                        });\n                    }\n\n                    else if(data.description.type === 'answer'){\n                        await this.pc.get(data.sender)?.setRemoteDescription(new RTCSessionDescription(data.description));\n                    }\n                });\n\n                resolve(this.socket);\n            });\n        });\n    }\n\n    init = (createOffer: boolean, partnerName: string) =>{\n        this.pc.set(partnerName, new RTCPeerConnection({iceServers: [\n                {\n                    urls: [\"stun:eu-turn4.xirsys.com\"]\n                },\n                {\n                    username: \"ml0jh0qMKZKd9P_9C0UIBY2G0nSQMCFBUXGlk6IXDJf8G2uiCymg9WwbEJTMwVeiAAAAAF2__hNSaW5vbGVl\",\n                    credential: \"4dd454a6-feee-11e9-b185-6adcafebbb45\",\n                    urls: [\n                        \"turn:eu-turn4.xirsys.com:80?transport=udp\",\n                        \"turn:eu-turn4.xirsys.com:3478?transport=tcp\"\n                    ]\n                }\n            ]\n        }));\n\n        console.log(\"jai un stream ????\")\n\n         if(this.myStream){\n             console.log(\"jai un stream\")\n            this.myStream.getTracks().forEach((track)=>{\n                this.pc.get(partnerName)!.addTrack(track, this.myStream);//should trigger negotiationneeded event\n            });\n        }\n\n        /*else{\n             navigator.mediaDevices.getUserMedia({\n                 video: true,\n                 audio: {\n                     echoCancellation: true,\n                     noiseSuppression: true\n                 }\n             }).then((stream)=>{\n                //save my stream\n                this.myStream = stream;\n\n                stream.getTracks().forEach((track : MediaStreamTrack)=>{\n                    this.pc.get(partnerName)!.addTrack(track, stream);//should trigger negotiationneeded event\n                });\n\n                //h.setLocalStream(stream);\n            }).catch((e)=>{\n                console.error(`stream error: ${e}`);\n            });\n        }*/\n\n\n\n        //create offer\n        if(createOffer){\n            this.pc.get(partnerName)!.onnegotiationneeded = async ()=>{\n                let offer = await this.pc.get(partnerName)!.createOffer();\n                await this.pc.get(partnerName)!.setLocalDescription(offer);\n                let ordi = this.pc.get(partnerName)\n                if (ordi){\n                    console.log(\"je vai envoyer sdp Ã  \" + partnerName);\n                    this.socket.emit('sdp', {description:ordi.localDescription, to:partnerName, sender:this.socket.io.engine.id});\n                }\n            };\n        }\n\n        //send ice candidate to partnerNames\n        this.pc.get(partnerName)!.onicecandidate = ({candidate})=>{\n            this.socket.emit('ice candidates', {candidate: candidate, to:partnerName, sender:this.socketId});\n        };\n\n\n\n        //add\n        this.pc.get(partnerName)!.ontrack = (e)=>{\n            let str = e.streams[0];\n            if(document.getElementById(partnerName)){\n                // @ts-ignore\n                document.getElementById(partnerName).srcObject = str;\n            }\n\n            /*else{\n                //video elem\n                let newVid = document.createElement('video');\n                newVid.id = `${partnerName}-video`;\n                newVid.srcObject = str;\n                newVid.autoplay = true;\n                newVid.className = 'remote-video';\n\n                //video controls elements\n                let controlDiv = document.createElement('div');\n                controlDiv.className = 'remote-video-controls';\n                controlDiv.innerHTML = `<i class=\"fa fa-microphone text-white pr-3 mute-remote-mic\" title=\"Mute\"></i>\n                        <i class=\"fa fa-expand text-white expand-remote-video\" title=\"Expand\"></i>`;\n\n                //create a new div for card\n                let cardDiv = document.createElement('div');\n                cardDiv.className = 'card card-sm';\n                cardDiv.id = partnerName;\n                cardDiv.appendChild(newVid);\n                cardDiv.appendChild(controlDiv);\n\n                //put div in main-section elem\n                document.getElementById('videos').appendChild(cardDiv);\n\n          //      h.adjustVideoElemSize();\n            }*/\n        };\n\n\n\n        this.pc.get(partnerName)!.onconnectionstatechange = (d)=>{\n            switch(this.pc.get(partnerName)!.iceConnectionState){\n                case 'disconnected':\n                case 'failed':\n                    console.log(\"singale failed\");\n                  //  h.closeVideo(partnerName);\n                    break;\n\n                case 'closed':\n                    console.log(\"signale closed\");\n                   // h.closeVideo(partnerName);\n                    break;\n            }\n        };\n\n\n\n        this.pc.get(partnerName)!.onsignalingstatechange = (d)=>{\n            switch(this.pc.get(partnerName)!.signalingState){\n                case 'closed':\n                    console.log(\"Signalling state is 'closed'\");\n               //     h.closeVideo(partnerName);\n                    break;\n            }\n        };\n\n        store.dispatch({type : \"ADD_PC\", pc : this.pc});\n\n    }\n\n    disconnect() {\n        this.socket.emit('disconnect');\n        this.socket.close();\n    }\n}\n\nconst instance = new Socket();\nexport default instance\n"]},"metadata":{},"sourceType":"module"}