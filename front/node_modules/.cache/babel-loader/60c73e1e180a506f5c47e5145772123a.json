{"ast":null,"code":"import io from 'socket.io-client';\n\nclass Socket {\n  constructor() {\n    this.socket = void 0;\n    this.pc = void 0;\n    this.myStream = void 0;\n  }\n\n  send() {\n    this.socket.emit('message', 'hi');\n  }\n\n  connect(room) {\n    if (this.socket && this.socket.connected) {\n      return;\n    }\n\n    this.socket = io('http://localhost:8080');\n    return new Promise(resolve => {\n      this.socket.on('connect', () => {\n        let socketId = this.socket.io.engine.id;\n        this.socket.emit('subscribe', {\n          room: room,\n          socketId: socketId\n        });\n        this.socket.on('new user', data => {\n          this.socket.emit('newUserStart', {\n            to: data.socketId,\n            sender: socketId\n          });\n          this.pc.push(data.socketId); // init(true, data.socketId);\n        });\n        this.socket.on('newUserStart', data => {\n          this.pc.push(data.sender); // init(false, data.sender);\n        });\n        this.socket.on('ice candidates', async data => {\n          data.candidate ? await this.pc[data.sender].addIceCandidate(new RTCIceCandidate(data.candidate)) : '';\n        });\n        this.socket.on('sdp', async data => {\n          if (data.description.type === 'offer') {\n            data.description ? await this.pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description)) : '';\n            /*h.getUserFullMedia().then(async (stream)=>{\n                if(!document.getElementById('local').srcObject){\n                    h.setLocalStream(stream);\n                }\n                 //save my stream\n                myStream = stream;\n                 stream.getTracks().forEach((track)=>{\n                    this.pc[data.sender].addTrack(track, stream);\n                });\n                 let answer = await this.pc[data.sender].createAnswer();\n                 await this.pc[data.sender].setLocalDescription(answer);\n                 this.socket.emit('sdp', {description:this.pc[data.sender].localDescription, to:data.sender, sender:socketId});\n            }).catch((e)=>{\n                console.error(e);\n            });*/\n          } else if (data.description.type === 'answer') {\n            await this.pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description));\n          }\n        });\n        resolve(this.socket);\n      });\n    });\n  }\n  /*    init = (createOffer: boolean, partnerName: string) =>{\n          this.pc[partnerName] = new RTCPeerConnection(h.getIceServer());\n  \n          if(screen && screen.getTracks().length){\n              screen.getTracks().forEach((track)=>{\n                  this.pc[partnerName].addTrack(track, screen);//should trigger negotiationneeded event\n              });\n          }\n  \n          else if(myStream){\n              myStream.getTracks().forEach((track)=>{\n                  this.pc[partnerName].addTrack(track, myStream);//should trigger negotiationneeded event\n              });\n          }\n  \n          else{\n              h.getUserFullMedia().then((stream)=>{\n                  //save my stream\n                  myStream = stream;\n  \n                  stream.getTracks().forEach((track)=>{\n                      this.pc[partnerName].addTrack(track, stream);//should trigger negotiationneeded event\n                  });\n  \n                  h.setLocalStream(stream);\n              }).catch((e)=>{\n                  console.error(`stream error: ${e}`);\n              });\n          }\n  \n  \n  \n          //create offer\n          if(createOffer){\n              this.pc[partnerName].onnegotiationneeded = async ()=>{\n                  let offer = await this.pc[partnerName].createOffer();\n  \n                  await this.pc[partnerName].setLocalDescription(offer);\n  \n                  this.socket.emit('sdp', {description:this.pc[partnerName].localDescription, to:partnerName, sender:this.socket.io.engine.id});\n              };\n          }\n  \n  \n  \n          //send ice candidate to partnerNames\n          pc[partnerName].onicecandidate = ({candidate})=>{\n              socket.emit('ice candidates', {candidate: candidate, to:partnerName, sender:socketId});\n          };\n  \n  \n  \n          //add\n          pc[partnerName].ontrack = (e)=>{\n              let str = e.streams[0];\n              if(document.getElementById(`${partnerName}-video`)){\n                  document.getElementById(`${partnerName}-video`).srcObject = str;\n              }\n  \n              else{\n                  //video elem\n                  let newVid = document.createElement('video');\n                  newVid.id = `${partnerName}-video`;\n                  newVid.srcObject = str;\n                  newVid.autoplay = true;\n                  newVid.className = 'remote-video';\n  \n                  //video controls elements\n                  let controlDiv = document.createElement('div');\n                  controlDiv.className = 'remote-video-controls';\n                  controlDiv.innerHTML = `<i class=\"fa fa-microphone text-white pr-3 mute-remote-mic\" title=\"Mute\"></i>\n                          <i class=\"fa fa-expand text-white expand-remote-video\" title=\"Expand\"></i>`;\n  \n                  //create a new div for card\n                  let cardDiv = document.createElement('div');\n                  cardDiv.className = 'card card-sm';\n                  cardDiv.id = partnerName;\n                  cardDiv.appendChild(newVid);\n                  cardDiv.appendChild(controlDiv);\n  \n                  //put div in main-section elem\n                  document.getElementById('videos').appendChild(cardDiv);\n  \n                  h.adjustVideoElemSize();\n              }\n          };\n  \n  \n  \n          pc[partnerName].onconnectionstatechange = (d)=>{\n              switch(pc[partnerName].iceConnectionState){\n                  case 'disconnected':\n                  case 'failed':\n                      h.closeVideo(partnerName);\n                      break;\n  \n                  case 'closed':\n                      h.closeVideo(partnerName);\n                      break;\n              }\n          };\n  \n  \n  \n          pc[partnerName].onsignalingstatechange = (d)=>{\n              switch(pc[partnerName].signalingState){\n                  case 'closed':\n                      console.log(\"Signalling state is 'closed'\");\n                      h.closeVideo(partnerName);\n                      break;\n              }\n          };\n      }\n  */\n\n\n  disconnect() {\n    this.socket.emit('disconnect');\n    this.socket.close();\n  }\n\n}\n\nconst instance = new Socket();\nexport default instance;","map":{"version":3,"sources":["/home/rimkus/WebstormProjects/UVIID/front/src/Socket.tsx"],"names":["io","Socket","socket","pc","myStream","send","emit","connect","room","connected","Promise","resolve","on","socketId","engine","id","data","to","sender","push","candidate","addIceCandidate","RTCIceCandidate","description","type","setRemoteDescription","RTCSessionDescription","disconnect","close","instance"],"mappings":"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","sourcesContent":["import io from 'socket.io-client'\n\n\nclass  Socket {\n    private socket : any;\n    private pc : RTCPeerConnection[];\n    private myStream : MediaStream;\n\n    send() {\n        this.socket.emit('message', 'hi');\n    }\n\n    connect(room : string) {\n        if (this.socket && this.socket.connected) {\n            return ;\n        }\n        this.socket = io('http://localhost:8080');\n        return new Promise(resolve => {\n            this.socket.on('connect', () => {\n                let socketId = this.socket.io.engine.id;\n\n                this.socket.emit('subscribe', {\n                    room: room,\n                    socketId: socketId\n                });\n\n                this.socket.on('new user', (data: any)=>{\n                    this.socket.emit('newUserStart', {to:data.socketId, sender:socketId});\n                    this.pc.push(data.socketId);\n                   // init(true, data.socketId);\n                });\n\n\n                this.socket.on('newUserStart', (data : any)=>{\n                    this.pc.push(data.sender);\n                   // init(false, data.sender);\n                });\n\n                this.socket.on('ice candidates', async (data: any)=>{\n                    data.candidate ? await this.pc[data.sender].addIceCandidate(new RTCIceCandidate(data.candidate)) : '';\n                });\n\n\n                this.socket.on('sdp', async (data : any)=>{\n                    if(data.description.type === 'offer'){\n                        data.description ? await this.pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description)) : '';\n\n                        /*h.getUserFullMedia().then(async (stream)=>{\n                            if(!document.getElementById('local').srcObject){\n                                h.setLocalStream(stream);\n                            }\n\n                            //save my stream\n                            myStream = stream;\n\n                            stream.getTracks().forEach((track)=>{\n                                this.pc[data.sender].addTrack(track, stream);\n                            });\n\n                            let answer = await this.pc[data.sender].createAnswer();\n\n                            await this.pc[data.sender].setLocalDescription(answer);\n\n                            this.socket.emit('sdp', {description:this.pc[data.sender].localDescription, to:data.sender, sender:socketId});\n                        }).catch((e)=>{\n                            console.error(e);\n                        });*/\n                    }\n\n                    else if(data.description.type === 'answer'){\n                        await this.pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description));\n                    }\n                });\n\n                resolve(this.socket);\n            });\n        });\n    }\n\n/*    init = (createOffer: boolean, partnerName: string) =>{\n        this.pc[partnerName] = new RTCPeerConnection(h.getIceServer());\n\n        if(screen && screen.getTracks().length){\n            screen.getTracks().forEach((track)=>{\n                this.pc[partnerName].addTrack(track, screen);//should trigger negotiationneeded event\n            });\n        }\n\n        else if(myStream){\n            myStream.getTracks().forEach((track)=>{\n                this.pc[partnerName].addTrack(track, myStream);//should trigger negotiationneeded event\n            });\n        }\n\n        else{\n            h.getUserFullMedia().then((stream)=>{\n                //save my stream\n                myStream = stream;\n\n                stream.getTracks().forEach((track)=>{\n                    this.pc[partnerName].addTrack(track, stream);//should trigger negotiationneeded event\n                });\n\n                h.setLocalStream(stream);\n            }).catch((e)=>{\n                console.error(`stream error: ${e}`);\n            });\n        }\n\n\n\n        //create offer\n        if(createOffer){\n            this.pc[partnerName].onnegotiationneeded = async ()=>{\n                let offer = await this.pc[partnerName].createOffer();\n\n                await this.pc[partnerName].setLocalDescription(offer);\n\n                this.socket.emit('sdp', {description:this.pc[partnerName].localDescription, to:partnerName, sender:this.socket.io.engine.id});\n            };\n        }\n\n\n\n        //send ice candidate to partnerNames\n        pc[partnerName].onicecandidate = ({candidate})=>{\n            socket.emit('ice candidates', {candidate: candidate, to:partnerName, sender:socketId});\n        };\n\n\n\n        //add\n        pc[partnerName].ontrack = (e)=>{\n            let str = e.streams[0];\n            if(document.getElementById(`${partnerName}-video`)){\n                document.getElementById(`${partnerName}-video`).srcObject = str;\n            }\n\n            else{\n                //video elem\n                let newVid = document.createElement('video');\n                newVid.id = `${partnerName}-video`;\n                newVid.srcObject = str;\n                newVid.autoplay = true;\n                newVid.className = 'remote-video';\n\n                //video controls elements\n                let controlDiv = document.createElement('div');\n                controlDiv.className = 'remote-video-controls';\n                controlDiv.innerHTML = `<i class=\"fa fa-microphone text-white pr-3 mute-remote-mic\" title=\"Mute\"></i>\n                        <i class=\"fa fa-expand text-white expand-remote-video\" title=\"Expand\"></i>`;\n\n                //create a new div for card\n                let cardDiv = document.createElement('div');\n                cardDiv.className = 'card card-sm';\n                cardDiv.id = partnerName;\n                cardDiv.appendChild(newVid);\n                cardDiv.appendChild(controlDiv);\n\n                //put div in main-section elem\n                document.getElementById('videos').appendChild(cardDiv);\n\n                h.adjustVideoElemSize();\n            }\n        };\n\n\n\n        pc[partnerName].onconnectionstatechange = (d)=>{\n            switch(pc[partnerName].iceConnectionState){\n                case 'disconnected':\n                case 'failed':\n                    h.closeVideo(partnerName);\n                    break;\n\n                case 'closed':\n                    h.closeVideo(partnerName);\n                    break;\n            }\n        };\n\n\n\n        pc[partnerName].onsignalingstatechange = (d)=>{\n            switch(pc[partnerName].signalingState){\n                case 'closed':\n                    console.log(\"Signalling state is 'closed'\");\n                    h.closeVideo(partnerName);\n                    break;\n            }\n        };\n    }\n*/\n    disconnect() {\n        this.socket.emit('disconnect');\n        this.socket.close();\n    }\n}\n\nconst instance = new Socket();\nexport default instance\n"]},"metadata":{},"sourceType":"module"}